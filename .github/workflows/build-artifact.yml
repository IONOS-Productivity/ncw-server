name: Build Nextcloud Workspace artifact

# SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors
# SPDX-FileCopyrightText: 2025 STRATO AG
# SPDX-License-Identifier: AGPL-3.0-or-later

# The Nextcloud Workspace source is packaged as a container image.
# This is a workaround because releases cannot be created without tags,
# and we want to be able to create snapshots from branches.

on:
  pull_request:
    paths:
      - '.github/workflows/**'
      - 'src/**'
      - 'apps/**'
      - 'apps/**/appinfo/info.xml'
      - 'apps-external/**'
      - 'IONOS'
      - 'package.json'
      - 'package-lock.json'
      - 'themes/**'
      - 'lib/**'
      - 'tsconfig.json'
      - '**.js'
      - '**.ts'
      - '**.vue'
      - '.gitmodules'
  push:
    branches:
      - ionos-dev
      - ionos-stable
  workflow_dispatch:
    inputs:
      ignore-cache:
        description: 'Ignore cached build artifacts and force rebuild of external apps'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

env:
  TARGET_PACKAGE_NAME: nc-workspace.zip
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  ARTIFACTORY_REPOSITORY_SNAPSHOT: ionos-productivity-ncwserver-snapshot

permissions:
  contents: read

jobs:
  debug-inputs:
    runs-on: ubuntu-latest
    name: Debug workflow inputs
    steps:
      - name: Display workflow trigger information
        run: |
          echo "::group::Workflow Trigger Information"
          echo "Event name: ${{ github.event_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Branch/Ref: ${{ github.ref_name }}"
          echo "SHA: ${{ github.sha }}"
          echo "Actor: ${{ github.actor }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Run Number: ${{ github.run_number }}"
          echo "::endgroup::"

      - name: Display workflow_dispatch inputs
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "::group::Manual Workflow Dispatch Inputs"
          echo "::notice 🔧 Manual workflow trigger detected!"
          echo ""
          echo "::notice 📋 Input Parameters:"
          echo "::notice   ignore-cache: '${{ github.event.inputs.ignore-cache || 'false' }}'"
          echo ""
          if [ "${{ github.event.inputs.ignore-cache }}" == "true" ]; then
            echo "::notice ⚠️  CACHE WILL BE IGNORED - All external apps will be rebuilt from scratch"
          else
            echo "::notice ✅ Cache will be used if available to speed up build"
          fi
          echo "::endgroup::"

      - name: Display automatic trigger information
        if: github.event_name != 'workflow_dispatch'
        run: |
          echo "::group::Automatic Trigger Information"
          echo "::notice 🤖 Workflow triggered automatically by: ${{ github.event_name }}"
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "  PR Number: #${{ github.event.pull_request.number }}"
            echo "  PR Title: ${{ github.event.pull_request.title }}"
            echo "  PR Author: ${{ github.event.pull_request.user.login }}"
          elif [ "${{ github.event_name }}" == "push" ]; then
            echo "  Pushed to branch: ${{ github.ref_name }}"
            echo "  Commit message: ${{ github.event.head_commit.message }}"
          fi
          echo "::endgroup::"

  prepare-matrix:
    runs-on: ubuntu-latest
    needs: debug-inputs
    outputs:
      external-apps-matrix: ${{ steps.check-caches.outputs.matrix }}
      cache-results: ${{ steps.check-caches.outputs.cache-results }}
      apps-to-build: ${{ steps.check-caches.outputs.apps-to-build }}

    steps:
      - name: Checkout server
        uses: actions/checkout@v5
        with:
          submodules: true
          fetch-depth: '1'

      - name: Set matrix. Check cache availability for all apps
        id: check-caches
        run: |
          # Create matrix configuration as a compact JSON string
          apps='[
            {
              "name": "richdocuments",
              "path": "apps-external/richdocuments",
              "has_npm": true,
              "has_composer": true,
              "makefile_target": "build_richdocuments_app"
            },
            {
              "name": "viewer",
              "path": "apps-external/viewer",
              "has_npm": true,
              "has_composer": true,
              "makefile_target": "build_viewer_app"
            },
            {
              "name": "calendar",
              "path": "apps-external/calendar",
              "has_npm": true,
              "has_composer": true,
              "makefile_target": "build_calendar_app"
            },
            {
              "name": "activity",
              "path": "apps-external/activity",
              "has_npm": true,
              "has_composer": true,
              "makefile_target": "build_activity_app"
            },
            {
              "name": "contacts",
              "path": "apps-external/contacts",
              "has_npm": true,
              "has_composer": true,
              "makefile_target": "build_contacts_app"
            },
            {
              "name": "circles",
              "path": "apps-external/circles",
              "has_npm": false,
              "has_composer": true,
              "makefile_target": "build_circles_app"
            },
            {
              "name": "files_antivirus",
              "path": "apps-external/files_antivirus",
              "has_npm": false,
              "has_composer": true,
              "makefile_target": "build_files_antivirus_app"
            },
            {
              "name": "notify_push",
              "path": "apps-external/notify_push",
              "has_npm": false,
              "has_composer": true,
              "makefile_target": "build_notify_push_app"
            },
            {
              "name": "tasks",
              "path": "apps-external/tasks",
              "has_npm": true,
              "has_composer": true,
              "makefile_target": "build_tasks_app"
            },
            {
              "name": "fulltextsearch",
              "path": "apps-external/fulltextsearch",
              "has_npm": false,
              "has_composer": true,
              "makefile_target": "build_fulltextsearch_app"
            },
            {
              "name": "files_fulltextsearch",
              "path": "apps-external/files_fulltextsearch",
              "has_npm": false,
              "has_composer": true,
              "makefile_target": "build_files_fulltextsearch_app"
            },
            {
              "name": "fulltextsearch_elasticsearch",
              "path": "apps-external/fulltextsearch_elasticsearch",
              "has_npm": false,
              "has_composer": true,
              "makefile_target": "build_fulltextsearch_elasticsearch_app"
            },
            {
              "name": "spreed",
              "path": "apps-external/spreed",
              "has_npm": true,
              "has_composer": true,
              "makefile_target": "build_spreed_app"
            },
            {
              "name": "mail",
              "path": "apps-external/mail",
              "has_npm": true,
              "has_composer": true,
              "makefile_target": "build_mail_app"
            },
            {
              "name": "ncw_apps_menu",
              "path": "apps-external/ncw_apps_menu",
              "has_npm": true,
              "has_composer": true,
              "makefile_target": "build_ncw_apps_menu_app"
            },
            {
              "name": "ncw_mailtemplate",
              "path": "apps-external/ncw_mailtemplate",
              "has_npm": false,
              "has_composer": true,
              "makefile_target": "build_ncw_mailtemplate_app"
            },
            {
              "name": "notes",
              "path": "apps-external/notes",
              "has_npm": true,
              "has_composer": true,
              "makefile_target": "build_notes_app"
            },
            {
              "name": "groupfolders",
              "path": "apps-external/groupfolders",
              "has_npm": true,
              "has_composer": true,
              "makefile_target": "build_groupfolders_app"
            },
            {
              "name": "deck",
              "path": "apps-external/deck",
              "has_npm": true,
              "has_composer": true,
              "makefile_target": "build_deck_app"
            },
            {
              "name": "forms",
              "path": "apps-external/forms",
              "has_npm": true,
              "has_composer": true,
              "makefile_target": "build_forms_app"
            },
            {
              "name": "text",
              "path": "apps-external/text",
              "has_npm": true,
              "has_composer": true,
              "makefile_target": "build_text_app"
            },
            {
              "name": "whiteboard",
              "path": "apps-external/whiteboard",
              "has_npm": true,
              "has_composer": true,
              "makefile_target": "build_whiteboard_app"
            },
            {
              "name": "assistant",
              "path": "apps-external/assistant",
              "has_npm": true,
              "has_composer": true,
              "makefile_target": "build_assistant_app"
            },
            {
              "name": "integration_openai",
              "path": "apps-external/integration_openai",
              "has_npm": true,
              "has_composer": true,
              "makefile_target": "build_integration_openai_app"
            }
          ]'

          # Validate JSON and output as compact format
          if echo "$apps" | jq empty 2>/dev/null; then
            echo "matrix=$(echo "$apps" | jq -c '.')" >> $GITHUB_OUTPUT
            echo "Matrix configuration set successfully"
          else
            echo "Error: Invalid JSON in matrix configuration"
            exit 1
          fi

          cache_results="{}"
          apps_to_build="[]"

          # Check each app's cache status
          echo "$apps" | jq -c '.[]' | while read app; do
            app_name=$(echo "$app" | jq -r '.name')
            app_path=$(echo "$app" | jq -r '.path')
            has_npm=$(echo "$app" | jq -r '.has_npm')
            has_composer=$(echo "$app" | jq -r '.has_composer')

            echo "Checking cache for $app_name..."

            # Get submodule SHA
            if [ -d "$app_path" ]; then
              SUBMODULE_SHA=$(git submodule status "$app_path" | awk '{print $1}' | sed 's/^[+-]//')
            else
              echo "Warning: $app_path does not exist, will need to build"
              SUBMODULE_SHA="missing"
            fi

            # Get hashes for cache keys
            NPM_HASH=""
            COMPOSER_HASH=""

            if [ "$has_npm" == "true" ] && [ -f "$app_path/package-lock.json" ]; then
              NPM_HASH=$(sha256sum "$app_path/package-lock.json" | cut -d' ' -f1)
            fi

            if [ "$has_composer" == "true" ] && [ -f "$app_path/composer.lock" ]; then
              COMPOSER_HASH=$(sha256sum "$app_path/composer.lock" | cut -d' ' -f1)
            fi

            # Build cache key
            CACHE_KEY="app-complete-${app_name}-${SUBMODULE_SHA}-${NPM_HASH}-${COMPOSER_HASH}"
            if [ "${{ github.event.inputs.ignore-cache }}" == "true" ]; then
              CACHE_KEY="${CACHE_KEY}-force-rebuild"
            fi

            echo "Cache key for $app_name: $CACHE_KEY"

            # Store app info with cache key for later use

            data_to_save="{\"app\":$app,\"cache_key\":\"$CACHE_KEY\",\"submodule_sha\":\"$SUBMODULE_SHA\",\"npm_hash\":\"$NPM_HASH\",\"composer_hash\":\"$COMPOSER_HASH\"}"

            if [ -f /tmp/app_cache_info.json ]; then
              app_cache_info=$(cat /tmp/app_cache_info.json)
              echo $app_cache_info | jq -c ". += [$data_to_save]" > /tmp/app_cache_info.json
            else
              echo "[$data_to_save]" > /tmp/app_cache_info.json
            fi
          done

          # Read all app cache info and determine which apps need building
          if [ -f /tmp/app_cache_info.json ]; then
            # For now, we'll assume all apps need building since we can't easily check cache existence
            # In a real scenario, you'd query the cache API or use a different approach
            echo "apps-to-build=$(cat /tmp/app_cache_info.json)" >> $GITHUB_OUTPUT
            echo "cache-results={}" >> $GITHUB_OUTPUT
          else
            echo "apps-to-build=[]" >> $GITHUB_OUTPUT
            echo "cache-results={}" >> $GITHUB_OUTPUT
          fi

      - name: Filter apps that need building
        id: filter-apps
        run: |
          # Since we can't easily check cache existence in the check job,
          # we'll pass all apps but with enhanced cache info for the build job to decide
          apps_to_build='${{ steps.check-caches.outputs.apps-to-build }}'

          # Extract just the app info for the matrix
          if [ "$apps_to_build" != "[]" ] && [ "$apps_to_build" != "" ]; then
            filtered_apps=$(echo "$apps_to_build" | jq '[.[].app]')
            echo "apps-to-build=$filtered_apps" >> $GITHUB_OUTPUT
          else
            echo "apps-to-build=[]" >> $GITHUB_OUTPUT
          fi

          echo "Apps that will be processed: $(echo '${{ steps.check-caches.outputs.apps-to-build }}' | jq length) apps"

  # Build only apps that need building
  build-external-apps:
    runs-on: ubuntu-latest
    needs: prepare-matrix
    # Only run if there are apps to build
    if: needs.prepare-matrix.outputs.apps-to-build != '[]'
    permissions:
      contents: read

    name: build-external-apps
    strategy:
      max-parallel: 20
      matrix:
        app: ${{ fromJson(needs.prepare-matrix.outputs.apps-to-build) }}

    steps:
      - name: Checkout server
        uses: actions/checkout@v5
        with:
          submodules: true
          fetch-depth: '1'

      - name: Display cache configuration
        run: |
          echo "Cache ignore setting: ${{ github.event.inputs.ignore-cache || 'false' }}"
          if [ "${{ github.event.inputs.ignore-cache }}" == "true" ]; then
            echo "⚠️  Cache will be ignored - forcing rebuild of ${{ matrix.app.name }}"
          else
            echo "✅ Cache will be used if available for ${{ matrix.app.name }}"
          fi

      - name: Get submodule SHA for ${{ matrix.app.name }}
        id: get-submodule-sha
        run: |
          # Get the SHA of the specific submodule
          SUBMODULE_SHA=$(git submodule status ${{ matrix.app.path }} | awk '{print $1}' | sed 's/^[+-]//')
          echo "submodule-sha=$SUBMODULE_SHA" >> $GITHUB_OUTPUT
          echo "Submodule SHA for ${{ matrix.app.name }}: $SUBMODULE_SHA"

      - name: Check for cached build artifact
        id: cache-check
        uses: actions/cache@v4
        with:
          path: ${{ matrix.app.path }}
          key: external-app-build-${{ matrix.app.name }}-${{ steps.get-submodule-sha.outputs.submodule-sha }}${{ github.event.inputs.ignore-cache == 'true' && '-force-rebuild' || '' }}

      - name: Set up node with version from package.json's engines
        if: matrix.app.has_npm && steps.cache-check.outputs.cache-hit != 'true'
        uses: actions/setup-node@v5
        with:
          node-version-file: "package.json"
          cache: 'npm'
          cache-dependency-path: ${{ matrix.app.path }}/package-lock.json

      - name: Setup PHP with PECL extension
        if: matrix.app.has_composer && steps.cache-check.outputs.cache-hit != 'true'
        uses: shivammathur/setup-php@c541c155eee45413f5b09a52248675b1a2575231 #v2.31.1
        with:
          tools: composer:v2
          extensions: gd, zip, curl, xml, xmlrpc, mbstring, sqlite, xdebug, pgsql, intl, imagick, gmp, apcu, bcmath, redis, soap, imap, opcache
        env:
          runner: ubuntu-latest

      - name: Cache Composer dependencies for ${{ matrix.app.name }}
        if: matrix.app.has_composer && steps.cache-check.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: ${{ matrix.app.path }}/vendor
          key: ${{ runner.os }}-composer-${{ matrix.app.name }}-${{ hashFiles(format('{0}/composer.lock', matrix.app.path)) }}
          restore-keys: |
            ${{ runner.os }}-composer-${{ matrix.app.name }}-

      - name: Build ${{ matrix.app.name }} app
        if: steps.cache-check.outputs.cache-hit != 'true'
        run: make -f IONOS/Makefile ${{ matrix.app.makefile_target }}

      - name: Cache built app for future use
        if: steps.cache-check.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            ${{ matrix.app.path }}
            !${{ matrix.app.path }}/node_modules
          key: external-app-build-${{ matrix.app.name }}-${{ steps.get-submodule-sha.outputs.submodule-sha }}

      - name: Upload ${{ matrix.app.name }} build artifacts
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: external-app-build-${{ matrix.app.name }}
          path: |
            ${{ matrix.app.path }}
            !${{ matrix.app.path }}/node_modules

  build-artifact:
    runs-on: ubuntu-latest
    needs: [prepare-matrix, build-external-apps]

    permissions:
      contents: read

    outputs:
      NC_VERSION: ${{ steps.get_nc_version.outputs.NC_VERSION }}

    name: build-artifact
    steps:
      - name: Checkout server
        uses: actions/checkout@v5
        with:
          submodules: true
          fetch-depth: '1'

      - name: Download build external apps
        uses: actions/download-artifact@v5
        with:
          pattern: external-app-build-*
          path: apps-external/

      - name: Reorganize downloaded apps-external artifacts
        run: |
          cd apps-external/

          echo "Initial structure:"
          ls -la

          # Move contents from external-app-build-* directories to their target directories
          for artifact_dir in external-app-build-*; do
            if [ -d "$artifact_dir" ]; then
              # Extract app name from artifact directory name
              app_name=${artifact_dir#external-app-build-}

              echo "Processing artifact: $artifact_dir -> $app_name"

              # If target directory exists, merge the contents from the artifact directory containing build artifacts
              if [ -d "$app_name" ]; then
                echo "Target directory $app_name exists, merging contents from $artifact_dir"
                # Copy contents from artifact directory to target directory
                cp -r "$artifact_dir"/* "$app_name"/
                # Remove the now-empty artifact directory
                rm -rf "$artifact_dir"
              else
                # Move the artifact directory to the proper app name
                echo "Moving $artifact_dir to $app_name"
                mv "$artifact_dir" "$app_name"
              fi
            fi
          done

          echo "Reorganization complete. Final structure:"
          ls -la

      - name: Verify downloaded artifacts structure
        run: |
          echo "External apps structure:"
          ls -la apps-external/
          for app_dir in apps-external/*/; do
            if [ -d "$app_dir" ]; then
              echo "Contents of $app_dir:"
              ls -la "$app_dir"
            fi
          done

      - name: Set up node with version from package.json's engines
        uses: actions/setup-node@v5
        with:
          node-version-file: "package.json"
          cache: 'npm'

      - name: Install Dependencies
        run: sudo apt-get update && sudo apt-get install -y make zip unzip

      - name: Print dependencies versions
        run: make --version && node --version && npm --version

      - name: Setup PHP with PECL extension
        uses: shivammathur/setup-php@c541c155eee45413f5b09a52248675b1a2575231 #v2.31.1
        with:
          tools: composer:v2
          extensions: gd, zip, curl, xml, xmlrpc, mbstring, sqlite, xdebug, pgsql, intl, imagick, gmp, apcu, bcmath, redis, soap, imap, opcache
        env:
          runner: ubuntu-latest

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Print PHP install
        run: php -i && php -m

      - name: Build Nextcloud
        run: make -f IONOS/Makefile build_ncw

      - name: Add config partials
        run: make -f IONOS/Makefile add_config_partials

      - name: Zip dependencies
        run: make -f IONOS/Makefile zip_dependencies TARGET_PACKAGE_NAME=${{ env.TARGET_PACKAGE_NAME }}

      - name: Get NC version
        id: get_nc_version
        continue-on-error: false
        run: |
          NC_VERSION=$(jq -r '.ncVersion' version.json)
          echo "NC_VERSION: $NC_VERSION"

          if [ -z "$NC_VERSION" ]; then
            echo "NC_VERSION is empty"
            exit 1
          fi

          echo "NC_VERSION=$NC_VERSION" >> $GITHUB_OUTPUT

      - name: Upload artifact result for job build-artifact
        uses: actions/upload-artifact@v4
        with:
          retention-days: 30
          name: nextcloud_workspace_build_artifact
          path: ${{ env.TARGET_PACKAGE_NAME }}

      - name: Show changes on failure
        if: failure()
        run: |
          git status
          git --no-pager diff
          exit 1 # make it red to grab attention

  upload-to-artifactory:
    runs-on: self-hosted
    # Upload the artifact to the Artifactory repository on PR *OR* on "ionos-dev|ionos-stable" branch push defined in the on:push:branches
    if: github.event_name == 'pull_request' || github.ref_name == 'ionos-dev' || github.ref_name == 'ionos-stable'

    name: Push to artifactory
    needs: [prepare-matrix, build-external-apps, build-artifact]

    outputs:
      ARTIFACTORY_LAST_BUILD_PATH: ${{ steps.artifactory_upload.outputs.ARTIFACTORY_LAST_BUILD_PATH }}

    env:
      BUILD_NAME: "nextcloud-workspace-snapshot"

    steps:
      - name: Check prerequisites
        run: |
          # count the number of secrets that are set
          echo "Checking if required secrets are set..."
          error_count=0

          if [ -z "${{ secrets.JF_ARTIFACTORY_URL }}" ]; then
            # output error to github actions log
            echo "::error::JF_ARTIFACTORY_URL secret is not set"
            error_count=$((error_count + 1))
          fi

          if [ -z "${{ secrets.JF_ARTIFACTORY_USER }}" ]; then
            echo "::error::JF_ARTIFACTORY_USER secret is not set"
            error_count=$((error_count + 1))
          fi

          if [ -z "${{ secrets.JF_ACCESS_TOKEN }}" ]; then
            echo "::error::JF_ACCESS_TOKEN secret is not set"
            error_count=$((error_count + 1))
          fi

          # abort if any of the required secrets are not set
          if [ $error_count -ne 0 ]; then
              echo "::error::Required secrets are not set. Aborting."
              exit 1
          fi

      - name: Download artifact zip
        uses: actions/download-artifact@v5
        with:
          name: nextcloud_workspace_build_artifact

      # This action sets up the JFrog CLI with the Artifactory URL and access token
      - uses: jfrog/setup-jfrog-cli@7c95feb32008765e1b4e626b078dfd897c4340ad # v4.4.1
        env:
          JF_URL: ${{ secrets.JF_ARTIFACTORY_URL }}
          JF_USER: ${{ secrets.JF_ARTIFACTORY_USER }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

      - name: Ping the JF server
        run: |
          # Ping the server
          jf rt ping

      - name: Upload build to artifactory
        id: artifactory_upload
        run: |
          # PR builds are stored in a separate directory as "dev/pr/nextcloud-workspace-pr-<number>.zip"
          # Push to "ionos-dev" branch is stored as "dev/nextcloud-workspace-<ncVersion>.zip"

          ARTIFACTORY_STAGE_PREFIX="dev"

          # set ARTIFACTORY_STAGE_PREFIX=stable on ionos-stable branch
          if [ "${{ github.ref_name }}" == "ionos-stable" ]; then
              ARTIFACTORY_STAGE_PREFIX="stable"
          fi

          export PATH_TO_DIRECTORY="${{ env.ARTIFACTORY_REPOSITORY_SNAPSHOT }}/${ARTIFACTORY_STAGE_PREFIX}"
          PATH_TO_FILE="pr/nextcloud-workspace-pr-${{ github.event.pull_request.number }}.zip"

          if [ -z "${{ github.event.pull_request.number }}" ]; then
            PATH_TO_FILE="nextcloud-workspace-${{ needs.build-artifact.outputs.NC_VERSION }}.zip"
          fi

          export PATH_TO_LATEST_ARTIFACT="${PATH_TO_DIRECTORY}/${PATH_TO_FILE}"

          # Promote current build to the "latest" dev build
          jf rt upload "${{ env.TARGET_PACKAGE_NAME }}" \
          --build-name "${{ env.BUILD_NAME }}" \
          --build-number ${{ github.run_number }} \
          --target-props "build.nc_version=${{ needs.build-artifact.outputs.NC_VERSION }};vcs.branch=${{ github.ref }};vcs.revision=${{ github.sha }}" \
          $PATH_TO_LATEST_ARTIFACT

          echo "ARTIFACTORY_LAST_BUILD_PATH=${PATH_TO_LATEST_ARTIFACT}" >> $GITHUB_OUTPUT

      - name: Show changes on failure
        if: failure()
        run: |
          git status
          git --no-pager diff
          exit 1 # make it red to grab attention

  nextcloud-workspace-artifact-to-ghcr_io:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    name: Push artifact to ghcr.io
    needs: [prepare-matrix, build-external-apps, build-artifact]

    steps:
      - name: Download artifact zip
        uses: actions/download-artifact@v5
        with:
          name: nextcloud_workspace_build_artifact

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"

      - name: Create Dockerfile
        run: |
          cat >Dockerfile << EOF
          FROM busybox as builder
          COPY ./${{ env.TARGET_PACKAGE_NAME }} /
          WORKDIR /builder
          RUN unzip /${{ env.TARGET_PACKAGE_NAME }} -d /builder

          FROM scratch
          WORKDIR /app
          VOLUME /app
          COPY --from=builder /builder /app
          EOF

      - name: Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Show changes on failure
        if: failure()
        run: |
          echo "Git status:"
          git status
          echo "Git diff:"
          git diff
          exit 1 # make it red to grab attention

  trigger-remote-dev-worflow:
    runs-on: self-hosted

    name: Trigger remote workflow
    needs: [ build-artifact, upload-to-artifactory ]
    # Trigger remote build on "ionos-dev|ionos-stable" branch *push* defined in the on:push:branches
    if: github.event_name == 'push' && ( github.ref_name == 'ionos-dev' || github.ref_name == 'ionos-stable' )
    steps:
      - name: Trigger remote workflow
        run: |
          # Enable command echo
          set -x

          # The 'ionos-dev' branch will trigger remote "dev" branch workflow
          GITLAB_BRANCH="dev"

          # set ARTIFACTORY_STAGE_PREFIX=stable on ionos-stable branch
          if [ ${{ github.ref_name }} == "ionos-stable" ]; then
              GITLAB_BRANCH="stable"
          fi

          # Call webhook
          curl \
          --silent \
          --insecure \
          --request POST \
          --fail-with-body \
          -o response.json \
          --form token=${{ secrets.GITLAB_TOKEN }} \
          --form ref="${GITLAB_BRANCH}" \
          --form "variables[GITHUB_SHA]=${{ github.sha }}" \
          --form "variables[ARTIFACTORY_LAST_BUILD_PATH]=${{ needs.upload-to-artifactory.outputs.ARTIFACTORY_LAST_BUILD_PATH }}" \
          --form "variables[NC_VERSION]=${{ needs.build-artifact.outputs.NC_VERSION }}" \
          --form "variables[BUILD_ID]=${{ github.run_id }}" \
          "${{ secrets.GITLAB_TRIGGER_URL }}" || ( RETCODE="$?"; jq . response.json; exit "$RETCODE" )

          # Disable command echo
          set +x

          # Print and parse json
          # jq . response.json
          echo "json<<END" >> $GITHUB_OUTPUT
          cat response.json >> $GITHUB_OUTPUT
          echo "END" >> $GITHUB_OUTPUT
          echo "web_url<<END" >> $GITHUB_OUTPUT
          cat response.json | jq --raw-output '.web_url' >> $GITHUB_OUTPUT
          echo "END" >> $GITHUB_OUTPUT

      - name: Show changes on failure
        if: failure()
        run: |
          git status
          git --no-pager diff
          exit 1 # make it red to grab attention
